package structs

// AUTOMATICALLY GENERATED - DO NOT EDIT THIS FILE

// Request  Type: structs.RequestStruct
// Generated File: /home/guionardo/dev/go-router/cmd/endpoint_gen/structs/structs_request_struct_handler.go
// Response Type: structs.ResponseStruct
import (
	"github.com/guionardo/go-router/pkg/tools"
	"net/http"
)

func (h *RequestStruct) ParseRequest(r *http.Request) error {

	if err := tools.GroupError("path",
		func() error { return tools.ParseInt("Id", r.PathValue("id"), &h.Id) },
		func() error { return tools.ParseUInt("Operation", r.PathValue("operation"), &h.Operation) },
	); err != nil {
		return err
	}

	if err := tools.GroupError("headers",
		func() error {
			h.APIKey = r.Header.Get("X-API-KEY")
			return nil
		},
		func() error { return tools.ParseDuration("TTL", r.Header.Get("X-TTL"), &h.TTL) },
		func() error { return tools.ParseFloat64("Value", r.Header.Get("value"), &h.Value) },
		func() error { return tools.ParseUInt8("NumberByte", r.Header.Get("number_byte"), &h.NumberByte) },
	); err != nil {
		return err
	}

	if err := tools.GroupError("query",
		func() error {
			h.Name = r.URL.Query().Get("name")
			return nil
		},
		func() error { return tools.ParseTime("When", r.URL.Query().Get("when"), &h.When) },
		func() error { return tools.ParseBool("Enabled", r.URL.Query().Get("enabled"), &h.Enabled) },
		func() error { return tools.ParseUInt64("NumberBig", r.URL.Query().Get("number_big"), &h.NumberBig) },
	); err != nil {
		return err
	}
	// Validation (native)
	if err := h.Validate(); err != nil {
		return err
	}
	return nil
}

// Hash validation for type
func init() {
	tools.ValidateHash[RequestStruct](0xcbd6058698a85db2)
}
